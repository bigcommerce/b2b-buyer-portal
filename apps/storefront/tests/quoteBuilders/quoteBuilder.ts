import { faker } from '@faker-js/faker';
import { getUnixTime } from 'date-fns';
import { builder } from 'tests/builder';

import { B2BQuoteDetail } from '@/shared/service/b2b/graphql/quote';

type Address =
  | B2BQuoteDetail['data']['quote']['billingAddress']
  | B2BQuoteDetail['data']['quote']['shippingAddress'];

type QuoteProduct = B2BQuoteDetail['data']['quote']['productsList'][number];

const buildAddressWith = builder<Address>(() => ({
  city: faker.location.city(),
  label: faker.lorem.word(),
  state: faker.location.state(),
  address: faker.location.streetAddress(),
  country: faker.location.country(),
  zipCode: faker.location.zipCode(),
  lastName: faker.person.lastName(),
  addressId: faker.number.int().toString(),
  apartment: faker.location.secondaryAddress(),
  firstName: faker.person.firstName(),
  phoneNumber: faker.phone.number(),
  addressLabel: faker.lorem.word(),
}));

const buildQuoteProductWith = builder<QuoteProduct>(() => ({
  productId: faker.number.int().toString(),
  sku: faker.string.uuid(),
  basePrice: faker.commerce.price(),
  discount: faker.commerce.price(),
  offeredPrice: faker.commerce.price(),
  quantity: faker.number.int(),
  variantId: faker.number.int(),
  imageUrl: faker.image.url(),
  orderQuantityMaximum: faker.number.int(),
  orderQuantityMinimum: faker.number.int(),
  productName: faker.commerce.productName(),
  purchaseHandled: faker.datatype.boolean(),
  options: Array.from({ length: faker.number.int({ min: 0, max: 10 }) }, () => ({
    type: faker.lorem.word(),
    optionId: faker.number.int(),
    optionName: faker.lorem.word(),
    optionLabel: faker.commerce.productMaterial(),
    optionValue: faker.lorem.word(),
  })),
  notes: faker.lorem.sentence(),
  costPrice: faker.commerce.price(),
  inventoryTracking: faker.lorem.word(),
  inventoryLevel: faker.number.int(),
}));

export const buildQuoteWith = builder<B2BQuoteDetail>(() => ({
  data: {
    quote: {
      id: faker.string.uuid(),
      createdAt: getUnixTime(faker.date.past().getTime()),
      updatedAt: getUnixTime(faker.date.recent().getTime()),
      quoteNumber: faker.string.uuid(),
      quoteTitle: faker.lorem.words(),
      referenceNumber: faker.string.uuid(),
      userEmail: faker.internet.email(),
      bcCustomerId: faker.number.int(),
      createdBy: faker.person.fullName(),
      expiredAt: getUnixTime(faker.date.future().getTime()),
      companyId: {
        id: faker.string.uuid(),
        companyName: faker.company.name(),
        bcGroupName: faker.company.buzzPhrase(),
        description: faker.lorem.sentence(),
        catalogId: null,
        companyStatus: faker.number.int(),
        addressLine1: faker.location.streetAddress(),
        addressLine2: faker.location.secondaryAddress(),
        city: faker.location.city(),
        state: faker.location.state(),
        zipCode: faker.location.zipCode(),
        country: faker.location.country(),
        extraFields: [],
      },
      salesRepStatus: faker.number.int(),
      customerStatus: faker.number.int(),
      subtotal: faker.commerce.price(),
      discount: faker.commerce.price(),
      grandTotal: faker.commerce.price(),
      cartId: faker.string.uuid(),
      cartUrl: faker.internet.url(),
      checkoutUrl: faker.internet.url(),
      bcOrderId: faker.string.uuid(),
      currency: {
        token: faker.finance.currencySymbol(),
        location: faker.location.country(),
        currencyCode: faker.finance.currencyCode(),
        decimalToken: '.',
        decimalPlaces: faker.number.int({ min: 0, max: 100 }),
        thousandsToken: ',',
        currencyExchangeRate: faker.finance.amount(),
      },
      contactInfo: {
        name: faker.person.fullName(),
        email: faker.internet.email(),
        companyName: faker.company.name(),
        phoneNumber: faker.phone.number(),
      },
      trackingHistory: Array.from({ length: faker.number.int({ min: 0, max: 10 }) }, () => ({
        date: getUnixTime(faker.date.recent().getTime()),
        read: faker.datatype.boolean(),
        role: faker.person.jobTitle(),
        message: faker.lorem.sentence(),
      })),
      extraFields: [],
      notes: faker.lorem.paragraph(),
      legalTerms: faker.lorem.paragraph(),
      shippingTotal: faker.commerce.price(),
      taxTotal: faker.commerce.price(),
      totalAmount: faker.commerce.price(),
      shippingMethod: {
        id: faker.number.int().toString(),
        cost: parseFloat(faker.commerce.price()),
        type: faker.lorem.word(),
        imageUrl: faker.image.url(),
        description: faker.lorem.sentence(),
        transitTime: faker.lorem.words(),
        additionalDescription: faker.lorem.sentence(),
      },
      billingAddress: buildAddressWith('WHATEVER_VALUES'),
      oldSalesRepStatus: null,
      oldCustomerStatus: null,
      recipients: [],
      discountType: faker.number.int(),
      discountValue: faker.commerce.price(),
      status: faker.number.int(),
      company: faker.company.name(),
      salesRep: faker.person.fullName(),
      salesRepEmail: faker.internet.email(),
      orderId: faker.number.int().toString(),
      shippingAddress: buildAddressWith('WHATEVER_VALUES'),
      productsList: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, () =>
        buildQuoteProductWith('WHATEVER_VALUES'),
      ),
      storefrontAttachFiles: [],
      backendAttachFiles: [],
      storeInfo: {
        storeName: faker.company.name(),
        storeAddress: faker.location.streetAddress(),
        storeCountry: faker.location.country(),
        storeLogo: faker.image.url(),
        storeUrl: faker.internet.url(),
      },
      companyInfo: {
        companyId: faker.number.int().toString(),
        companyName: faker.company.name(),
        companyAddress: faker.location.streetAddress(),
        companyCountry: faker.location.country(),
        companyState: faker.location.state(),
        companyCity: faker.location.city(),
        companyZipCode: faker.location.zipCode(),
        phoneNumber: faker.phone.number(),
      },
      salesRepInfo: {
        salesRepName: faker.person.fullName(),
        salesRepEmail: faker.internet.email(),
        salesRepPhoneNumber: faker.phone.number(),
      },
      quoteLogo: faker.image.url(),
      quoteUrl: faker.internet.url(),
      channelId: faker.number.int(),
      channelName: faker.company.name(),
      allowCheckout: faker.datatype.boolean(),
      displayDiscount: faker.datatype.boolean(),
    },
  },
}));

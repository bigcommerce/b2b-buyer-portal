name: '[Generic] - Storefront deployment'

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      store_list:
        required: false
        type: string
    secrets:
      ENV:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      API_HOST:
        required: true
      API_CREDENTIAL:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup NodeJS & Yarn
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: yarn

      - name: Install dependencies
        run: yarn install

      - name: Setup secrets
        run: base64 -d <<<${{ secrets.ENV }} > apps/storefront/.env.${{ inputs.environment }}

      - name: Build
        run: yarn build:${{ inputs.environment }}

      - name: Calculate revision
        run: echo "REVISION_TITLE=$(git rev-parse --short HEAD)-${{ github.run_id }}-${{ github.run_number }}-${{ github.run_attempt }}" >> $GITHUB_ENV

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Push files to s3
        run: |
          aws s3 cp apps/storefront/dist s3://b3-cdn-files/b2b/${{ inputs.environment }}/storefront --recursive --acl public-read
          aws cloudfront create-invalidation --distribution-id E1ZCC8QPXD9I6K --path "/*"

      - name: Create storefront revision
        shell: bash
        run: |
          poly_js=$(find apps/storefront/dist -name polyfills-legacy.*.js -type f -printf '%f')
          index_js=$(find apps/storefront/dist -name index.*.js ! -path "apps/storefront/dist/assets/*" -type f -printf '%f')
          indexLegacy_js=$(find apps/storefront/dist -name index-legacy.*.js ! -path "apps/storefront/dist/assets/*" -type f -printf '%f')

          curl --location --request POST '${{ secrets.API_HOST }}/api/v3/stores/revisions' \
          --header 'Authorization: Basic ${{ secrets.API_CREDENTIAL }}' \
          --header 'Content-Type: application/json' \
          --data-binary @- << EOF
          {
            "jsFiles": [
              "<script type=\"module\" crossorigin src=\"https://cdn.bundleb2b.net/b2b/${{ inputs.environment }}/storefront/${index_js}\"></script>",
              "<script nomodule crossorigin src=\"https://cdn.bundleb2b.net/b2b/${{ inputs.environment }}/storefront/${poly_js}\"></script>",
              "<script nomodule crossorigin src=\"https://cdn.bundleb2b.net/b2b/${{ inputs.environment }}/storefront/${indexLegacy_js}\"></script>"
            ],
            "revisionTitle": "${REVISION_TITLE}"
          }
          EOF

      - name: Deploy storefront revision to specific stores
        if: ${{ inputs.store_list != '' }}
        shell: bash
        run: |
          curl --location --request POST '${{ secrets.API_HOST }}/api/v3/stores/deployments' \
          --header 'Authorization: Basic ${{ secrets.API_CREDENTIAL }}' \
          --header 'Content-Type: application/json' \
          --data-binary @- << EOF
          {
            "deploy_all": false,
            "store_hashes": $(cat ${{ inputs.store_list }}),
            "revision": "${REVISION_TITLE}"
          }
          EOF

      - name: Deploy storefront revision to all stores
        if: ${{ inputs.store_list == '' }}
        shell: bash
        run: |
          curl --location --request POST '${{ secrets.API_HOST }}/api/v3/stores/deployments' \
          --header 'Authorization: Basic ${{ secrets.API_CREDENTIAL }}' \
          --header 'Content-Type: application/json' \
          --data-binary @- << EOF
          {
            "deploy_all": true,
            "revision": "${REVISION_TITLE}"
          }
          EOF

      - name: Send deployment stable message
        uses: slackapi/slack-github-action@v1
        if: ${{ inputs.environment  == 'production' }}
        with:
          payload: |
            {
              "channel": "b2b-deployments",
              "text": "B2B Buyer Portal Deployed\nEnvironment: `${{ inputs.environment }}`\nRevision: `${{ github.sha }}`\nBuild: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      - name: Send deployment failed message
        if: ${{ inputs.environment  == 'production' && failure() }}
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "channel": "b2b-deployments",
              "text": "B2B Buyer Portal Deployment Failed\nEnvironment: `${{ inputs.environment }}`\nRevision: `${{ github.sha }}`\nBuild: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
